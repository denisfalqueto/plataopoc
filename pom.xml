<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>br.jus.trt.app</groupId>
    <artifactId>platao</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>platao application</name>

    <modules>
        <module>plataoear-ejb</module>
        <module>plataoear-web</module>
        <module>plataoear-ear</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <trtcommon.version>0.0.1-SNAPSHOT</trtcommon.version>
        <!-- Variável utilizada para configurar o ProjectStage do DeltaSpike.
        Pode ser modificada em um profile específico. -->
        <ambiente>Development</ambiente>
        <log4j2.version>2.0.2</log4j2.version>
        <log4j2.level>ALL</log4j2.level>
        <browser>phantomjs</browser> <!-- PhantomJS será o browser default para testes de interface se nenhum profile for especificado -->
    </properties>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>br.jus.trt.lib</groupId>
                <artifactId>common</artifactId>
                <version>${trtcommon.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Define the version of the EJB jar so that we don't need to repeat 
            ourselves in every module -->
            <dependency>
                <groupId>br.jus.trt.app</groupId>
                <artifactId>platao-ejb</artifactId>
                <version>${project.version}</version>
                <type>ejb</type>
            </dependency>
                        
            <!-- Define the version of the WAR so that we don't need to repeat ourselves 
            in every module -->
            <dependency>
                <groupId>br.jus.trt.app</groupId>
                <artifactId>platao-web</artifactId>
                <version>${project.version}</version>
                <type>war</type>
                <scope>compile</scope>
            </dependency>
	        
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.4.3</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation 
            processors -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.1</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
            <!-- The JBoss AS plugin deploys your ear to a local JBoss AS container -->
            <!-- Due to Maven's lack of intelligence with EARs we need to configure 
            the jboss-as maven plugin to skip deployment for all modules. We then enable 
            it specifically in the ear module. -->
            <plugin>
                <groupId>org.jboss.as.plugins</groupId>
                <artifactId>jboss-as-maven-plugin</artifactId>
                <version>7.0.2.Final</version>
                <inherited>true</inherited>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
    
	<profiles>
		<profile>
			<id>wildfly82-remote</id>

			<activation>
				<activeByDefault>true</activeByDefault>
			</activation> 

			<dependencies>
				<dependency>
					<groupId>org.wildfly</groupId>
					<artifactId>wildfly-arquillian-container-remote</artifactId>
					<version>8.2.0.Final</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.jboss.arquillian.protocol</groupId>
					<artifactId>arquillian-protocol-servlet</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
		
		<profile>
			<id>wildfy82-managed</id>

			<dependencies>
				<dependency>
					<groupId>org.wildfly</groupId>
					<artifactId>wildfly-arquillian-container-managed</artifactId>
					<version>8.2.0.Final</version>
					<scope>test</scope>
				</dependency>
			</dependencies>

			<build>
				<plugins>
					<!-- plugin do jacoco para gerar o relatório que será gerado pelo wildfly -->
					<plugin>
		                <groupId>org.jacoco</groupId>
		                <artifactId>jacoco-maven-plugin</artifactId>
		                <version>0.7.2.201409121644</version>
		                <configuration>  
		                    <dumpOnExit>true</dumpOnExit>  
		                    <excludes>  
		                        <exclude>org.jboss.arquillian.*</exclude>  
		                    </excludes>  
		                </configuration>
		                <executions>
		                    <execution>
		                        <goals>
		                            <goal>prepare-agent</goal>
		                        </goals>
		                    </execution>
		                    <execution>
					            <id>post-integration-test</id>
					            <phase>test</phase>
					            <goals>
					                <goal>report</goal>
					            </goals>
					            <configuration>
					                <!-- Sets the path to the file which contains the execution data. -->
					                <dataFile>${project.build.directory}/jacoco.exec</dataFile>
					                <!-- Sets the output directory for the code coverage report. -->
					                <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
					            </configuration>
					        </execution>
		                </executions>
		            </plugin>
					<!-- You need the maven dependency plugin to download locally a zip 
						with the server, unless you provide your own, it will download under the 
						/target directory -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<version>2.8</version>
						<executions>
							<execution>
								<id>unpack</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.wildfly</groupId>
											<artifactId>wildfly-dist</artifactId>
											<version>8.2.0.Final</version>
											<type>zip</type>
											<overWrite>false</overWrite>
											<outputDirectory>target</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
							<!-- Baixar o jacoco para teste de cobertura no servidor wildfly -->
							<execution>  
		                        <id>unpackjacoco</id>  
		                        <phase>process-test-classes</phase>  
		                        <goals>  
		                            <goal>unpack</goal>  
		                        </goals>  
		                        <configuration>  
		                            <artifactItems>  
		                                <artifactItem>  
		                                    <groupId>org.jacoco</groupId>  
		                                    <artifactId>org.jacoco.agent</artifactId>  
		                                    <version>0.7.2.201409121644</version>  
		                                    <type>jar</type>  
		                                    <overWrite>false</overWrite>  
		                                    <outputDirectory>target/jacoco-agent</outputDirectory>  
		                                </artifactItem>  
		                                <artifactItem>
		                                    <groupId>org.wildfly</groupId>
		                                    <artifactId>wildfly-dist</artifactId>
		                                    <version>8.2.0.Final</version>
		                                    <type>zip</type>
		                                    <overWrite>false</overWrite>
		                                    <outputDirectory>target/</outputDirectory>
		                                </artifactItem>
		                            </artifactItems> 
		                        </configuration>  
		                    </execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.17</version>
						<configuration>
							<systemPropertyVariables>
								<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
								<!-- the maven dependency plugin will have already downloaded the 
									server on /target -->
								<jboss.home>${project.basedir}/target/wildfly-8.2.0.Final</jboss.home>
								<module.path>${project.basedir}/target/wildfly-8.2.0.Final/modules</module.path>
							</systemPropertyVariables>
							<redirectTestOutputToFile>false</redirectTestOutputToFile>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>		
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian 
				tests that execute in the specified container -->
			<id>No tests</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>		
		<profile>
	       <id>firefox</id>
	       <properties>
	          <browser>firefox</browser>
	       </properties>
	    </profile>
	    <profile>
	       <id>chrome</id>
	       <properties>
	           <browser>chrome</browser>
	       </properties>
		</profile>
	</profiles>    
</project>
